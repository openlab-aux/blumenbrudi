esphome:
  name: blumenbrudi
  platform: ESP32
  board: heltec_wifi_lora_32
  includes:
    - chirp.h

wifi:
  ssid: "Labor 2.0"
  password: "nerdhoehle2"
  fast_connect: true

logger:

web_server:
  port: 80

prometheus:

ota:
  password: "olaota!1"

api:
  password: "olagr0wth!1"

dallas:
  - pin: GPIO2
i2c:
  sda: GPIO4 # pin 4 sda
  scl: GPIO15 # pin 15 scl
font:
  - file: "luximr.ttf"
    id: my_font
    size: 16

sensor:
  - platform: custom
    lambda: |-
      auto my_chirp_0 = new ChirpComponent();
      App.register_component(my_chirp_0 );
      return {my_chirp_0};
    sensors:
      - name: "chirp_humidity_0"
        id: "chirp_humidity_0"
#  - platform: custom
#    lambda: |-
#      auto my_chirp_1 = new ChirpComponent();
#      my_chirp_1->set_addr(0x21);
#      App.register_component(my_chirp_1);
#      return {my_chirp_1};
#    sensors:
#      - name: "chirp_humidity_1"
#        id: "chirp_humidity_1"
  - platform: dallas
    address: 0x2C01193C9387AB28
    name: "soil_temperature_0"
  - platform: dallas
    address: 0x6101193C67025828
    name: "soil_temperature_1"
  - platform: dallas
    address: 0xC101193C65243828
    name: "soil_temperature_2"
  - platform: bme280
    temperature:
      name: "air_temperature"
      id: temperature
      accuracy_decimals: 2
    pressure:
      name: "air_pressure"
      id: pressure
      accuracy_decimals: 2
    humidity:
      name: "air_humidity"
      id: humidity
      accuracy_decimals: 2
    address: 0x76
    update_interval: 1s
  - platform: template
    name: "air_absolute_humidity"
    unit_of_measurement: "g/mÂ³"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(temperature).state) /
        (id(temperature).state + 243.5)) * id(humidity).state * mw) /
        ((273.15 + id(temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 10s

switch:
  - platform: gpio
    id: "blumenbrudi_motor_0"
    name: "blumenbrudi_motor_0"
    pin: GPIO19
    interlock: &interlock_group [blumenbrudi_motor_0, blumenbrudi_motor_1]
  - platform: gpio
    name: "blumenbrudi_motor_1"
    id: "blumenbrudi_motor_1"
    pin: GPIO18
    interlock: *interlock_group
  - platform: gpio
    name: "blumenbrudi_motor_enable"
    id: "blumenbrudi_motor_enable"
    pin: GPIO5
    on_turn_off:
      then:
        - switch.turn_off: blumenbrudi_motor_0
        - switch.turn_off: blumenbrudi_motor_1
display:
  - platform: ssd1306_i2c
    id: my_display
    model: "SSD1306 128x64"
    reset_pin: GPIO16 # pin 16 rst
    address: 0x3c
    pages:
      - id: chirps
        lambda: |-
          it.printf(0, 8, id(my_font), "Chirp 0: %.0f", id(chirp_humidity_0).state);
#    it.printf(0, 24, id(my_font), "Chirp 1: %.0f", id(chirp_humidity_1).state);
      - id: page1
        lambda: |-
          it.print(0, 0, id(my_font), "Hello World!");
          it.print(0, 16, id(my_font), "Wir haben   ");
          it.print(0, 32, id(my_font), "viel Platz  ");
          it.print(0, 48, id(my_font), "fuer Text. :)");
interval:
  - interval: 5s
    then:
      - display.page.show_next: my_display
      - component.update: my_display
